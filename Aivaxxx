use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    program_error::ProgramError,
    pubkey::Pubkey,
    msg,
};
use spl_token::{
    instruction::{initialize_account, initialize_mint, mint_to, burn, transfer},
    state::{Account, Mint},
};

// Program entry point
entrypoint!(process_instruction);

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    match instruction_data[0] {
        0 => initialize_token(program_id, accounts),
        1 => mint_tokens(accounts, instruction_data),
        2 => transfer_tokens(accounts, instruction_data),
        3 => burn_tokens(accounts, instruction_data),
        _ => Err(ProgramError::InvalidInstructionData),
    }
}

// Initialize token mint
fn initialize_token(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let mint_account = next_account_info(accounts_iter)?;
    let rent = next_account_info(accounts_iter)?;
    
    // Initialize mint with 9 decimals (common for meme coins)
    initialize_mint(
        &spl_token::id(),
        mint_account,
        program_id,
        Some(program_id),
        9,
    )?;
    
    msg!("Token mint initialized successfully!");
    Ok(())
}

// Mint new tokens
fn mint_tokens(accounts: &[AccountInfo], instruction_data: &[u8]) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let mint_account = next_account_info(accounts_iter)?;
    let token_account = next_account_info(accounts_iter)?;
    let authority = next_account_info(accounts_iter)?;
    
    // Get amount from instruction data
    let amount = u64::from_le_bytes(instruction_data[1..9].try_into().unwrap());
    
    mint_to(
        &spl_token::id(),
        mint_account,
        token_account,
        authority,
        &[],
        amount,
    )?;
    
    msg!("Minted {} tokens", amount);
    Ok(())
}

// Transfer tokens between accounts
fn transfer_tokens(accounts: &[AccountInfo], instruction_data: &[u8]) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let source = next_account_info(accounts_iter)?;
    let destination = next_account_info(accounts_iter)?;
    let owner = next_account_info(accounts_iter)?;
    
    // Get amount from instruction data
    let amount = u64::from_le_bytes(instruction_data[1..9].try_into().unwrap());
    
    transfer(
        &spl_token::id(),
        source,
        destination,
        owner,
        &[],
        amount,
    )?;
    
    msg!("Transferred {} tokens", amount);
    Ok(())
}

// Burn tokens
fn burn_tokens(accounts: &[AccountInfo], instruction_data: &[u8]) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let account = next_account_info(accounts_iter)?;
    let mint = next_account_info(accounts_iter)?;
    let authority = next_account_info(accounts_iter)?;
    
    // Get amount from instruction data
    let amount = u64::from_le_bytes(instruction_data[1..9].try_into().unwrap());
    
    burn(
        &spl_token::id(),
        account,
        mint,
        authority,
        &[],
        amount,
    )?;
    
    msg!("Burned {} tokens", amount);
    Ok(())
}
